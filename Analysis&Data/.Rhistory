vector <lower=0>[N_uncensored] times_uncensored;
}
parameters{
vector[numCovariates] beta; //regression coefficients
real alpha; //intercept
}
model{
beta ~ normal(0,10); //prior on regression coefficients
alpha ~ normal(0,10); //prior on intercept
target += exponential_lpdf(times_uncensored | exp(alpha+X_uncensored * beta)); //log-likelihood part for uncensored times
target += exponential_lccdf(times_censored | exp(alpha+X_censored * beta)); / / log-likelihood for censored times
}
generated quantities{
vector[N_uncensored] times_uncensored_sampled; //prediction of death
for(i in 1:N_ uncensored) {
times _ uncensored _ sampled[i] = exponential _rng(exp(alpha+X_uncensored[i,]* beta));
}
}
"
# prepare the data
set.seed(42);
require (tidyverse);
N <- nrow (ovarian);
X <- as.matrix(pull(ovarian , rx));
is_censored <- pull(ovarian ,fustat)==0;
times <- pull(ovarian ,futime);
msk_censored <- is_censored == 1;
N_censored <- sum(msk_censored);
Stan_data <- list (N_uncensored = N - N_censored,
N_censored = N_censored,
numCovariates = ncol(X),
X_censored = as.matrix(X[msk_censored ,]), X_uncensored=as.matrix(X[!msk_censored ,]),
times_censored=times[msk_censored],
times_uncensored = times[!msk_censored])
Stan_data
# Fit Stan model
require (rstan)
exp_surv_model_fit <- stan(model_code = Stan_exponential_survival_model, data = Stan_data )
Stan_exponential_survival_model <- "
data{
int <lower=1> N_uncensored;
int <lower=1> N_censored;
int <lower=0> numCovariates;
matrix[N_censored, numCovariates] X_censored;
matrix[N_uncensored, numCovariates] X_uncensored;
vector <lower=0>[N_censored] times_censored;
vector <lower=0>[N_uncensored] times_uncensored;
}
parameters{
vector[numCovariates] beta; //regression coefficients
real alpha; //intercept
}
model{
beta ~ normal(0,10); //prior on regression coefficients
alpha ~ normal(0,10); //prior on intercept
target += exponential_lpdf(times_uncensored | exp(alpha+X_uncensored * beta)); //log-likelihood part for uncensored times
target += exponential_lccdf(times_censored | exp(alpha+X_censored * beta)); / / log-likelihood for censored times
}
generated quantities{
vector[N_uncensored] times_uncensored_sampled; //prediction of death
for(i in 1:N_ uncensored) {
times _ uncensored _ sampled[i] = exponential _rng(exp(alpha+X_uncensored[i,]* beta));
}
}
"
# prepare the data
set.seed(42);
require (tidyverse);
N <- nrow (ovarian);
X <- as.matrix(pull(ovarian , rx));
is_censored <- pull(ovarian ,fustat)==0;
times <- pull(ovarian ,futime);
msk_censored <- is_censored == 1;
N_censored <- sum(msk_censored);
Stan_data <- list (N_uncensored = N - N_censored,
N_censored = N_censored,
numCovariates = ncol(X),
X_censored = as.matrix(X[msk_censored ,]), X_uncensored=as.matrix(X[!msk_censored ,]),
times_censored=times[msk_censored],
times_uncensored = times[!msk_censored])
Stan_data
# Fit Stan model
require (rstan)
exp_surv_model_fit <- stan(model_code = Stan_exponential_survival_model, data = Stan_data )
Stan_exponential_survival_model <- "
data{
int <lower=1> N_uncensored;
int <lower=1> N_censored;
int <lower=0> numCovariates;
matrix[N_censored, numCovariates] X_censored;
matrix[N_uncensored, numCovariates] X_uncensored;
vector <lower=0>[N_censored] times_censored;
vector <lower=0>[N_uncensored] times_uncensored;
}
parameters{
vector[numCovariates] beta; //regression coefficients
real alpha; //intercept
}
model{
beta ~ normal(0,10); //prior on regression coefficients
alpha ~ normal(0,10); //prior on intercept
target += exponential_lpdf(times_uncensored | exp(alpha+X_uncensored * beta)); //log-likelihood part for uncensored times
target += exponential_lccdf(times_censored | exp(alpha+X_censored * beta)); //log-likelihood for censored times
}
generated quantities{
vector[N_uncensored] times_uncensored_sampled; //prediction of death
for(i in 1:N_ uncensored) {
times _ uncensored _ sampled[i] = exponential _rng(exp(alpha+X_uncensored[i,]* beta));
}
}
"
library(rstan)
library(survival)
Stan_exponential_survival_model <- "
data{
int <lower=1> N_uncensored;
int <lower=1> N_censored;
int <lower=0> numCovariates;
matrix[N_censored, numCovariates] X_censored;
matrix[N_uncensored, numCovariates] X_uncensored;
vector <lower=0>[N_censored] times_censored;
vector <lower=0>[N_uncensored] times_uncensored;
}
parameters{
vector[numCovariates] beta; //regression coefficients
real alpha; //intercept
}
model{
beta ~ normal(0,10); //prior on regression coefficients
alpha ~ normal(0,10); //prior on intercept
target += exponential_lpdf(times_uncensored | exp(alpha+X_uncensored * beta)); //log-likelihood part for uncensored times
target += exponential_lccdf(times_censored | exp(alpha+X_censored * beta)); //log-likelihood for censored times
}
generated quantities{
vector[N_uncensored] times_uncensored_sampled; //prediction of death
for(i in 1:N_ uncensored) {
times _ uncensored _ sampled[i] = exponential _rng(exp(alpha+X_uncensored[i,]* beta));
}
}
"
# prepare the data
set.seed(42);
require (tidyverse);
N <- nrow (ovarian);
X <- as.matrix(pull(ovarian , rx));
is_censored <- pull(ovarian ,fustat)==0;
times <- pull(ovarian ,futime);
msk_censored <- is_censored == 1;
N_censored <- sum(msk_censored);
Stan_data <- list (N_uncensored = N - N_censored,
N_censored = N_censored,
numCovariates = ncol(X),
X_censored = as.matrix(X[msk_censored ,]), X_uncensored=as.matrix(X[!msk_censored ,]),
times_censored=times[msk_censored],
times_uncensored = times[!msk_censored])
Stan_data
# Fit Stan model
require (rstan)
exp_surv_model_fit <- stan(model_code = Stan_exponential_survival_model, data = Stan_data )
library(rstan)
library(survival)
Stan_exponential_survival_model <- "
data{
int <lower=1> N_uncensored;
int <lower=1> N_censored;
int <lower=0> numCovariates;
matrix[N_censored, numCovariates] X_censored;
matrix[N_uncensored, numCovariates] X_uncensored;
vector <lower=0>[N_censored] times_censored;
vector <lower=0>[N_uncensored] times_uncensored;
}
parameters{
vector[numCovariates] beta; //regression coefficients
real alpha; //intercept
}
model{
beta ~ normal(0,10); //prior on regression coefficients
alpha ~ normal(0,10); //prior on intercept
target += exponential_lpdf(times_uncensored | exp(alpha+X_uncensored * beta)); //log-likelihood part for uncensored times
target += exponential_lccdf(times_censored | exp(alpha+X_censored * beta)); //log-likelihood for censored times
}
generated quantities{
vector[N_uncensored] times_uncensored_sampled; //prediction of death
for(i in 1:N_uncensored) {
times_uncensored_sampled[i] = exponential _rng(exp(alpha+X_uncensored[i,]* beta));
}
}
"
# prepare the data
set.seed(42);
require (tidyverse);
N <- nrow (ovarian);
X <- as.matrix(pull(ovarian , rx));
is_censored <- pull(ovarian ,fustat)==0;
times <- pull(ovarian ,futime);
msk_censored <- is_censored == 1;
N_censored <- sum(msk_censored);
Stan_data <- list (N_uncensored = N - N_censored,
N_censored = N_censored,
numCovariates = ncol(X),
X_censored = as.matrix(X[msk_censored ,]), X_uncensored=as.matrix(X[!msk_censored ,]),
times_censored=times[msk_censored],
times_uncensored = times[!msk_censored])
Stan_data
# Fit Stan model
require (rstan)
exp_surv_model_fit <- stan(model_code = Stan_exponential_survival_model, data = Stan_data )
library(rstan)
library(survival)
Stan_exponential_survival_model <- "
data{
int <lower=1> N_uncensored;
int <lower=1> N_censored;
int <lower=0> numCovariates;
matrix[N_censored, numCovariates] X_censored;
matrix[N_uncensored, numCovariates] X_uncensored;
vector <lower=0>[N_censored] times_censored;
vector <lower=0>[N_uncensored] times_uncensored;
}
parameters{
vector[numCovariates] beta; //regression coefficients
real alpha; //intercept
}
model{
beta ~ normal(0,10); //prior on regression coefficients
alpha ~ normal(0,10); //prior on intercept
target += exponential_lpdf(times_uncensored | exp(alpha+X_uncensored * beta)); //log-likelihood part for uncensored times
target += exponential_lccdf(times_censored | exp(alpha+X_censored * beta)); //log-likelihood for censored times
}
generated quantities{
vector[N_uncensored] times_uncensored_sampled; //prediction of death
for(i in 1:N_uncensored) {
times_uncensored_sampled[i] = exponential_rng(exp(alpha+X_uncensored[i,]* beta));
}
}
"
# prepare the data
set.seed(42);
require (tidyverse);
N <- nrow (ovarian);
X <- as.matrix(pull(ovarian , rx));
is_censored <- pull(ovarian ,fustat)==0;
times <- pull(ovarian ,futime);
msk_censored <- is_censored == 1;
N_censored <- sum(msk_censored);
Stan_data <- list (N_uncensored = N - N_censored,
N_censored = N_censored,
numCovariates = ncol(X),
X_censored = as.matrix(X[msk_censored ,]), X_uncensored=as.matrix(X[!msk_censored ,]),
times_censored=times[msk_censored],
times_uncensored = times[!msk_censored])
Stan_data
# Fit Stan model
require (rstan)
exp_surv_model_fit <- stan(model_code = Stan_exponential_survival_model, data = Stan_data )
library(rstan)
library(survival)
Stan_exponential_survival_model <- "
data{
int <lower=1> N_uncensored;
int <lower=1> N_censored;
int <lower=0> numCovariates;
matrix[N_censored, numCovariates] X_censored;
matrix[N_uncensored, numCovariates] X_uncensored;
vector <lower=0>[N_censored] times_censored;
vector <lower=0>[N_uncensored] times_uncensored;
}
parameters{
vector[numCovariates] beta; //regression coefficients
real alpha; //intercept
}
model{
beta ~ normal(0,10); //prior on regression coefficients
alpha ~ normal(0,10); //prior on intercept
target += exponential_lpdf(times_uncensored | exp(alpha+X_uncensored * beta)); //log-likelihood part for uncensored times
target += exponential_lccdf(times_censored | exp(alpha+X_censored * beta)); //log-likelihood for censored times
}
generated quantities{
vector[N_uncensored] times_uncensored_sampled; //prediction of death
for(i in 1:N_uncensored) {
times_uncensored_sampled[i] = exponential_rng(exp(alpha+X_uncensored[i,]* beta));
}
}
"
# prepare the data
set.seed(42);
require (tidyverse);
N <- nrow (ovarian);
X <- as.matrix(pull(ovarian , rx));
is_censored <- pull(ovarian ,fustat)==0;
times <- pull(ovarian ,futime);
msk_censored <- is_censored == 1;
N_censored <- sum(msk_censored);
Stan_data <- list (N_uncensored = N - N_censored,
N_censored = N_censored,
numCovariates = ncol(X),
X_censored = as.matrix(X[msk_censored ,]), X_uncensored=as.matrix(X[!msk_censored ,]),
times_censored=times[msk_censored],
times_uncensored = times[!msk_censored])
Stan_data
# Fit Stan model
require (rstan)
exp_surv_model_fit <- stan(model_code = Stan_exponential_survival_model, data = Stan_data )
# Fit Stan model
require (rstan)
exp_surv_model_fit <- suppressMessages(stan(model_code = Stan_exponential_survival_model, data = Stan_data))
# Fit Stan model
require(rstan)
exp_surv_model_fit <- suppressMessages(stan(model_code = Stan_exponential_survival_model, data = Stan_data))
exp_surv_model_fit
library(rstan)
library(survival)
Stan_exponential_survival_model <- "
data{
int <lower=1> N_uncensored;
int <lower=1> N_censored;
int <lower=0> numCovariates;
matrix[N_censored, numCovariates] X_censored;
matrix[N_uncensored, numCovariates] X_uncensored;
vector <lower=0>[N_censored] times_censored;
vector <lower=0>[N_uncensored] times_uncensored;
}
parameters{
vector[numCovariates] beta; //regression coefficients
real alpha; //intercept
}
model{
beta ~ normal(0,10); //prior on regression coefficients
alpha ~ normal(0,10); //prior on intercept
target += exponential_lpdf(times_uncensored | exp(alpha+X_uncensored * beta)); //log-likelihood part for uncensored times
target += exponential_lccdf(times_censored | exp(alpha+X_censored * beta)); //log-likelihood for censored times
}
generated quantities{
vector[N_uncensored] times_uncensored_sampled; //prediction of death
for(i in 1:N_uncensored) {
times_uncensored_sampled[i] = exponential_rng(exp(alpha+X_uncensored[i,]* beta));
}
}
"
# prepare the data
set.seed(42);
require (tidyverse);
N <- nrow (ovarian);
X <- as.matrix(pull(ovarian , rx));
is_censored <- pull(ovarian ,fustat)==0;
times <- pull(ovarian ,futime);
msk_censored <- is_censored == 1;
N_censored <- sum(msk_censored);
Stan_data <- list (N_uncensored = N - N_censored,
N_censored = N_censored,
numCovariates = ncol(X),
X_censored = as.matrix(X[msk_censored ,]), X_uncensored=as.matrix(X[!msk_censored ,]),
times_censored=times[msk_censored],
times_uncensored = times[!msk_censored])
Stan_data
# Fit Stan model
require(rstan)
exp_surv_model_fit <- suppressMessages(stan(model_code = Stan_exponential_survival_model, data = Stan_data))
exp_surv_model_fit
# prepare the data
set.seed(42);
require (tidyverse);
data <- read_csv('data.csv')
N <- nrow (ovarian);
X <- as.matrix(pull(ovarian, rx));
is_censored <- pull(ovarian, fustat)==0;
times <- pull(ovarian ,futime);
msk_censored <- is_censored == 1;
N_censored <- sum(msk_censored);
# prepare the data
set.seed(42);
require (tidyverse);
data <- read_csv('data.csv')
N <- nrow (data);
X <- as.matrix(pull(data, host_type));
is_censored <- pull(data, status)==0;
times <- pull(ovarian, duration);
# prepare the data
set.seed(42);
require (tidyverse);
data <- read_csv('data.csv')
N <- nrow (data);
X <- as.matrix(pull(data, host_type));
is_censored <- pull(data, status)==0;
times <- pull(duration, duration);
# prepare the data
set.seed(42);
require (tidyverse);
data <- read_csv('data.csv')
N <- nrow (data);
X <- as.matrix(pull(data, host_type));
is_censored <- pull(data, status)==0;
times <- pull(data, duration);
msk_censored <- is_censored == 1;
N_censored <- sum(msk_censored);
Stan_data <- list (N_uncensored = N - N_censored,
N_censored = N_censored,
numCovariates = ncol(X),
X_censored = as.matrix(X[msk_censored ,]), X_uncensored=as.matrix(X[!msk_censored ,]),
times_censored=times[msk_censored],
times_uncensored = times[!msk_censored])
Stan_data
# Fit Stan model
require(rstan)
exp_surv_model_fit <- suppressMessages(stan(model_code = Stan_exponential_survival_model, data = Stan_data))
exp_surv_model_fit
# prepare the data
set.seed(42);
require (tidyverse);
data <- read_csv('data.csv')
N <- nrow (data);
X <- as.matrix(pull(data, multi_repo));
is_censored <- pull(data, status)==0;
times <- pull(data, duration);
msk_censored <- is_censored == 1;
N_censored <- sum(msk_censored);
Stan_data <- list (N_uncensored = N - N_censored,
N_censored = N_censored,
numCovariates = ncol(X),
X_censored = as.matrix(X[msk_censored ,]), X_uncensored=as.matrix(X[!msk_censored ,]),
times_censored=times[msk_censored],
times_uncensored = times[!msk_censored])
Stan_data
Stan_data <- list (N_uncensored = N - N_censored,
N_censored = N_censored,
numCovariates = ncol(X),
X_censored = as.matrix(X[msk_censored,]),
X_uncensored=as.matrix(X[!msk_censored ,]),
times_censored=times[msk_censored],
times_uncensored = times[!msk_censored])
Stan_data
# Fit Stan model
require(rstan)
exp_surv_model_fit <- suppressMessages(stan(model_code = Stan_exponential_survival_model, data = Stan_data))
exp_surv_model_fit
library(rstan)
library(survival)
Stan_exponential_survival_model <- "
data{
int <lower=1> N_uncensored;
int <lower=1> N_censored;
int <lower=0> numCovariates;
matrix[N_censored, numCovariates] X_censored;
matrix[N_uncensored, numCovariates] X_uncensored;
vector <lower=0>[N_censored] times_censored;
vector <lower=0>[N_uncensored] times_uncensored;
}
parameters{
vector[numCovariates] beta; //regression coefficients
real alpha; //intercept
}
model{
beta ~ normal(0,10); //prior on regression coefficients
alpha ~ normal(0,10); //prior on intercept
target += exponential_lpdf(times_uncensored | exp(alpha+X_uncensored * beta)); //log-likelihood part for uncensored times
target += exponential_lccdf(times_censored | exp(alpha+X_censored * beta)); //log-likelihood for censored times
}
generated quantities{
vector[N_uncensored] times_uncensored_sampled; //prediction of death
for(i in 1:N_uncensored) {
times_uncensored_sampled[i] = exponential_rng(exp(alpha+X_uncensored[i,]* beta));
}
}
"
# prepare the data
set.seed(42);
require (tidyverse);
data <- read_csv('data.csv')
N <- nrow (data);
X <- as.matrix(pull(data, multi_repo));
is_censored <- pull(data, status)==0;
times <- pull(data, duration);
msk_censored <- is_censored == 1;
N_censored <- sum(msk_censored);
Stan_data <- list (N_uncensored = N - N_censored,
N_censored = N_censored,
numCovariates = ncol(X),
X_censored = as.matrix(X[msk_censored,]),
X_uncensored=as.matrix(X[!msk_censored ,]),
times_censored=times[msk_censored],
times_uncensored = times[!msk_censored])
Stan_data
# Fit Stan model
require(rstan)
exp_surv_model_fit <- suppressMessages(stan(model_code = Stan_exponential_survival_model, data = Stan_data))
exp_surv_model_fit
inv_log(-2.11)
exp(-2.11)
exp(-2.11) * 100
exp(-2.11) * 100
10^x * 100
exp(-2.11) * 100
10^-2.11 * 100
exp(-2.11) * 100
10^-2.11
exp(-2.11) * 100
(10^-2.11) * 100
exp(-1.21) * 100
(10^-1.21) * 100
exp_surv_model_fit[2]
type(exp_surv_model_fit)
typeof(exp_surv_model_fit)
exp_surv_model_fit
plot(exp_surv_model_fit)
d <- as.data.frame(exp_surv_model_fit)
d <- as.data.frame(exp_surv_model_fit)
str(d)
exp_surv_model_fit
print(get_seed(exp_surv_model_fit))
fit_summary <- summary(exp_surv_model_fit)
fit_summary <- summary(exp_surv_model_fit)
print(fit_summary$summary)
